
import { addMinutes, isBefore, isAfter } from 'date-fns';
import { v4 as uuidv4 } from 'uuid';

const ADD_TUTOR = 'ADD_TUTOR'; // Add Tutor

const date1 = new Date(2024, 3, 22, 12, 30, 0);
const date2 = new Date(2024, 3, 23, 12, 30, 0);
const date3 = new Date(2024, 3, 23, 5, 30, 0);
const date4 = new Date(2024, 3, 23, 6, 30, 0);

const id1 = uuidv4();
const id2 = uuidv4();
const id3 = uuidv4();
const id4 = uuidv4();

const initialState = {
    tutorList: [{ id: id1, name: "Bob", gender: "남자", accent: "미국", university: "KAIST", major: "MAS", profile: "user.jpg", availableTime: [[date1, date2]] },
    { id: id2, name: "James", gender: "남자", accent: "영국", university: "KAIST", major: "CS", profile: "user.jpg", availableTime: [[date1, date2]] },
    { id: id3, name: "Allen", gender: "남자", accent: "호주", university: "Seoul Nat'I Univ.", major: "CS", profile: "user.jpg", availableTime: [[date3, date4]] },
    { id: id4, name: "Katie", gender: "여자", accent: "인도", university: "Korea Univ.", major: "CS", profile: "user.jpg", availableTime: [[date3, date4]] }
    ]
};

// Select tutor.
export const selectTutor = state => state.tutorData;

// Add tutor with name, gender, university, and major. ID is generated by uuidv4.
export const addTutor = (name, gender, accent, university, major, profile) => {

    const id = uuidv4();

    return {
        type: ADD_TUTOR,
        payload: { id, name, gender, accent, university, major, profile, availableTime: [] }
    };
};

// Filter with given conditions: gender, accent and major.
export function ConditionTutor(gender, accent, major, targetRequest, tutorList) {

    const conditionTutor = [];

    tutorList.forEach(tutor => {
        let cond1 = (gender === '성별' || gender === '상관없음') || ((gender !== '성별') && (tutor.gender === gender));
        let cond2 = (accent === '억양' || accent === '상관없음') || ((accent !== '억양') && (tutor.accent === accent));
        let cond3 = (major === '전공' || major === '상관없음') || ((major !== '전공') && (tutor.major === major));
        let cond4 = false;
        if (targetRequest) {
            const startTime = targetRequest['date'];
            if (startTime) {
                const endTime = addMinutes(startTime, parseInt(targetRequest['ticket']['duration']));
                tutor.availableTime.forEach(timeInterval => {
                    if (isBefore(timeInterval[0], startTime) && isAfter(timeInterval[1], endTime)) {
                        cond4 = true;
                    }
                })
            }
            else {
                cond4 = false;
            }
        }
        else {
            cond4 = true;
        }
        if (cond1 && cond2 && cond3 && cond4) {
            conditionTutor.push(tutor);
        }
    })

    return conditionTutor;
}

// Reducer function
const tutorDataReducer = (state = initialState, action) => {
    switch (action.type) {
        case ADD_TUTOR:
            return {
                ...state,
                tutorList: [...state.tutorList, action.payload]
            };
        default:
            return state;
    }
}

export default tutorDataReducer;